/*
 * NotStopAlarm
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using Microsoft.OpenApi.Models;
using Swashbuckle.AspNetCore.Swagger;
using Swashbuckle.AspNetCore.SwaggerGen;
using Repositories;
using RepositoriesImplementations;
using Microsoft.Extensions.FileSystemGlobbing.Internal.Patterns;
using Logic;
using Serilog;

namespace IO.Swagger
{
	/// <summary>
	/// Startup
	/// </summary>
	public class Startup
	{
		private readonly IWebHostEnvironment _hostingEnv;

		private IConfiguration Configuration { get; }

		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="env"></param>
		/// <param name="configuration"></param>
		public Startup(IWebHostEnvironment env, IConfiguration configuration)
		{
			_hostingEnv = env;
			Configuration = configuration;

			Log.Logger = new LoggerConfiguration()
				.ReadFrom.Configuration(configuration)
				.WriteTo.File("log.txt")
				.CreateLogger();
		}

		/// <summary>
		/// This method gets called by the runtime. Use this method to add services to the container.
		/// </summary>
		/// <param name="services"></param>
		public void ConfigureServices(IServiceCollection services)
		{
			// Add framework services.
			services
				.AddMvc()
				.AddXmlSerializerFormatters();
			services.AddControllers().AddNewtonsoftJson();

			services.AddSingleton<IAlarmClockRepo, AlarmClockFileRepo>();
			services.AddSingleton<INoteRepo, NoteFileRepo>();
			services.AddSingleton<IAlarmClockService, AlarmClockService>();
			services.AddSingleton<INoteService, NoteService>();

			services
				.AddSwaggerGen(c =>
				{
					c.SwaggerDoc("0.1.0", new OpenApiInfo
					{
						Version = "0.1.0",
						Title = "NotStopAlarm",
						Description = "NotStopAlarm (ASP.NET Core 3.1)",
						Contact = new OpenApiContact()
						{
						   Name = "Swagger Codegen Contributors",
						   Url = new Uri("https://github.com/swagger-api/swagger-codegen"),
						   Email = ""
						},
						TermsOfService = new Uri("https://example.com/terms")
					});
					c.CustomSchemaIds(type => type.FullName);
					c.IncludeXmlComments($"{AppContext.BaseDirectory}{Path.DirectorySeparatorChar}{_hostingEnv.ApplicationName}.xml", true);
				});
		}

		/// <summary>
		/// This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
		/// </summary>
		/// <param name="app"></param>
		/// <param name="env"></param>
		/// <param name="loggerFactory"></param>
		public void Configure(IApplicationBuilder app, IWebHostEnvironment env, ILoggerFactory loggerFactory)
		{
			app.UseRouting();

			//TODO: Uncomment this if you need wwwroot folder
			app.UseStaticFiles();
			//app.UseMvc();

			app.UseSwagger();
			app.UseSwaggerUI(c =>
			{
				//c.RoutePrefix = "api";
				c.SwaggerEndpoint("/swagger-original.json", "NotStopAlarm Original");
			});

			//TODO: Use Https Redirection
			app.UseHttpsRedirection();

			app.UseEndpoints(endpoints =>
			{
				endpoints.MapControllers();
			});

			if (env.IsDevelopment())
			{
				app.UseDeveloperExceptionPage();
			}
			else
			{
				//TODO: Enable production exception handling (https://docs.microsoft.com/en-us/aspnet/core/fundamentals/error-handling)
				app.UseExceptionHandler("/Error");

				app.UseHsts();
			}
		}
	}
}
